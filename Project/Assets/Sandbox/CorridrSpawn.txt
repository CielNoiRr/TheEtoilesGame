using System.Collections;
using UnityEngine;

public class CorridorsSpawner : MonoBehaviour
{
	[SerializeField]
	private VirtualPathData virtualPathData;

	public float speed;

	public GameObject corridorPrefab;

	private void Awake()
	{
		CreateCorridorPool();
	}

	private void CreateCorridorPool()
	{
		Vector3 position = virtualPathData.GetVirtualPath().StartsPoints[0];
		Vector3 worldPosition = virtualPathData.GetVirtualPath().EndPoints[0];
		PoolManager.instance.CreatePool(corridorPrefab, 20);
		GameObject obj = PoolManager.instance.ReuseObject(corridorPrefab, Vector3.zero, Quaternion.identity);
		obj.SetActive(value: false);
		obj.transform.parent.LookAt(worldPosition);
		obj.transform.parent.transform.position = position;
	}

	public void ShootCorridor(Note note)
	{
		GameObject gameObject = PoolManager.instance.ReuseObject(corridorPrefab, virtualPathData.GetVirtualPath().StartsPoints[note.CorridorPos], Quaternion.identity);
		float num = note.NotesDuration * 0.002f * speed;
		num = 0f - num;
		LineRenderer component = gameObject.GetComponent<LineRenderer>();
		component.SetPosition(1, new Vector3(component.GetPosition(1).x, component.GetPosition(1).y, num));
		Vector3 from = virtualPathData.GetVirtualPath().StartsPoints[note.CorridorPos];
		Vector3 to = virtualPathData.GetVirtualPath().EndPoints[note.CorridorPos];
		StartCoroutine(MoveProjectil(gameObject, from, to));
	}

	private IEnumerator MoveProjectil(GameObject InUseProjectil, Vector3 from, Vector3 to)
	{
		Rigidbody InUseProjectilRigidbody = InUseProjectil.GetComponent<Rigidbody>();
		InUseProjectil.transform.LookAt(to);
		InUseProjectil.transform.position = from;
		while (Vector3.Distance(InUseProjectil.transform.position, to) > 0.2f)
		{
			Vector3 normalized = (to - InUseProjectil.transform.position).normalized;
			Vector3 vector = new Vector3(normalized.x, normalized.y, normalized.z);
			InUseProjectilRigidbody.MovePosition(InUseProjectil.transform.position + vector * speed * Time.deltaTime);
			yield return new WaitForFixedUpdate();
		}
		InUseProjectil.SetActive(value: false);
	}

	public void OnDrawGizmos()
	{
		virtualPathData.GetVirtualPath();
		for (int i = 0; i < virtualPathData.GetVirtualPath().StartsPoints.Length; i++)
		{
			Gizmos.color = Color.red;
			Gizmos.DrawWireSphere(virtualPathData.GetVirtualPath().StartsPoints[i], 1f);
			Gizmos.DrawWireSphere(virtualPathData.GetVirtualPath().EndPoints[i], 1f);
			Gizmos.DrawLine(virtualPathData.GetVirtualPath().StartsPoints[i], virtualPathData.GetVirtualPath().EndPoints[i]);
		}
	}
}
